"""General variables and functions used throughout the vacuum module."""


# Standard library imports
from datetime import datetime

# Non standard imports
import oclock


# ======================= General Measurement Classes ========================


class SensorRecordingBase:

    def __init__(self, sensor, dt):
        """Parameters:

        sensor: object with a .name attribute
        dt: default / initial time interval between data readings
        """

        self.sensor = sensor
        self.name = self.sensor.name
        self.timer = oclock.Timer(interval=dt, name=self.sensor.name,
                                  warnings=True)

    def print_info_on_failed_reading(self, status):
        """Displays relevant info when reading fails."""
        t_str = datetime.now().isoformat(sep=' ', timespec='seconds')
        if status == 'failed':
            print(f'{self.name} reading failed ({t_str}). Retrying ...')
        elif status == 'resumed':
            print(f'{self.name} reading resumed ({t_str}).')

    def on_stop(self):
        """What happens when a stop event is requested in the CLI"""
        self.timer.stop()

    # ============ Methods that need to be defined in subclasses =============

    def get_sensor_exception_class(self):
        """Return error class that is generated by sensor when reading fails"""
        pass

    def read(self):
        """How to read the data"""
        pass

    def format_measurement(self, data):
        """How to format the data given by self.read()"""
        pass

    def init_file(self):
        """How to init the file containing the data."""
        pass

    def save(self, measurement):
        """How to write data of measurement to file"""
        pass

    # ======= Properties controlled by the CLI (in addition to timer) ========

    @property
    def misc_property(self):
        pass

    @misc_property.setter
    def misc_property(self, value):
        pass



# Measurement classes ========================================================


class MeasurementBase:
    """Base class for measurements data.

    Parameter
    ---------
    Name: sensor / recording name
    """
    def __init__(self, name):
        self.name = name
